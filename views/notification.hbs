<!-- Header -->
<header class="bg-white fixed-top">
    <div class="new-post-container pt-4 d-flex flex-row align-items-center">  
        <h1 class="m-0 ms-3">Notification</h1>
    </div>
    <nav>
        <ul class="nav nav-underline d-flex" id="wave-nav">
            <li class="nav-item flex-fill text-center">
                <a class="nav-link active" href="#" onclick="setActiveMode(event)">All
                </a>
            </li>
            <li class="nav-item flex-fill text-center">
                <a class="nav-link" href="#" onclick="setActiveMode(event)">Follows
                </a>
            </li>
            <li class="nav-item flex-fill text-center">
                <a class="nav-link" href="#" onclick="setActiveMode(event)">Replies
                </a>
            </li>
        </ul>
    </nav>
        
</header>
<!-- Main -->
<main>
    <div class="container-list" style="margin-bottom: 65px;">
        {{#each notifications}}
            <div class="noti ps-3 py-2 d-flex flex-row align-items-center {{#if this.IsRead}}read{{else}}unread{{/if}}" id="{{this.NotificationID}}">
                <div class="container-avatar mt-1 me-2 d-flex align-self-start align-items-center position-relative">
                    <img src="/{{this.actionUser.ProfilePicture}}" alt="avatar" class="img-fluid avatar"/>
                    <img src="/icons/{{this.Type}}-mark.svg" alt="noti" class="noti-mark position-absolute bottom-0 end-0" id="follow-mark"/>
                </div>
                <div class="container-fluid p-0 pb-2 d-flex justify-content-between" style="border-bottom: 0.25px solid #DFDFDF;">
                    <div class="noti-info">
                        <div class="username">
                            <strong class="mb-2">{{this.actionUser.Username}}</strong>
                            <p class="m-0" style="color: #3c3c43b1;">
                                {{#if (eq this.Type "follow")}}
                                    Followed you
                                {{else if (eq this.Type "like")}}
                                    Surged your wave
                                {{else if (eq this.Type "comment")}}
                                    Replied you
                                {{else}}
                                    {{this.Type}} you
                                {{/if}}
                            </p>
                        </div>
                        {{!-- <p class="text-muted small">{{this.createdAt}}</p> --}}
                    </div>
                    <div class="container-button me-3 d-flex align-items-center">
                        {{#if (eq this.Type "follow")}}
                            <button class="follow followButton">Follow back</button>
                        {{/if}}
                    </div>  
                </div>
            </div>
        {{/each}}

    </div>
</main>
<!-- Footer -->
{{> footer}}

<!-- Bootstrap JavaScript Libraries -->

<!--JS event-->
<script>
    function tabBarActive() {
        document.querySelectorAll(".tab-bar").forEach(image => {
        let imageSrc = image.src;
        let activeImageSrc = imageSrc.replace(".svg", "-active.svg");

        image.onclick = () => {
            image.src = activeImageSrc;
        }
        image.onmouseout = function() {
            this.src = imageSrc;
        }
    })
    }

    function setActiveMode(event) {
        document.querySelectorAll('#wave-nav .nav-link').forEach(link => {
            link.classList.remove('active');
        });

        event.currentTarget.classList.add('active');
    }

    function followAction(event) {
        let followBtn = event.currentTarget;

        if (followBtn.textContent.trim() === 'Follow back') {
            followBtn.textContent = 'Following';
            followBtn.classList.add('following');
            followBtn.classList.remove('follow');
        } else if (followBtn.textContent.trim() === 'Following') {
            followBtn.textContent = 'Follow back';
            followBtn.classList.add('follow');
            followBtn.classList.remove('following');
        }

        // Xử lý follow/unfollow
    }

    document.querySelectorAll('.followButton').forEach(button => {
        button.addEventListener('click', followAction);
    });



    document.addEventListener('DOMContentLoaded', function () {
        document.querySelectorAll('.noti').forEach(noti => {
            noti.addEventListener('click', async (event) => {
                const notificationId = event.currentTarget.id;
                console.log("Notification ID:", notificationId);

                const response = await fetch(`/notifications/${notificationId}/mark-as-read`, {
                    method: 'PATCH',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ isRead: true }),
                });

                if (response.ok) {
                    const notificationElement = event.target.closest('.noti');
                    if (notificationElement) {
                        notificationElement.classList.remove('unread');
                        notificationElement.classList.add('read');
                    } else {
                        console.error("Không tìm thấy phần tử thông báo.");
                    }
                } else {
                    console.error("Lỗi khi cập nhật trạng thái IsRead trong cơ sở dữ liệu.");
                }
            });
        });
    });

</script>